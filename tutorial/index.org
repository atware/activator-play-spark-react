#+TITLE: Play Spark React
#+AUTHOR: atWare, inc
#+EMAIL: jeff@atware.co.jp
#+DATE: 2015-10-26
#+DESCRIPTION: A little love, from atWare
#+LANGUAGE:  en
#+OPTIONS: toc:0 html-style:nil html-postamble:nil
#+OPTIONS: style-include-default:nil html-scripts:nil
#+OPTIONS: num:nil


** About This Application

This application demonstrates how to integrate Play and [[http://spark.apache.org/][Apache Spark]] together, using [[http://spark.apache.org/sql/][Spark SQL]] to perform a
non-trivial query. The application has a minimal user interface as well, mapping coordinates to
the [[http://developers.google.com/maps/][Google Map API]] with [[http://facebook.github.io/react/][React]] and a [[http://getbootstrap.com/components/#btn-groups][Bootstrap Toolbar]] from the [[http://react-bootstrap.github.io/][React Bootstrap]] project.

This project uses data from the [[http://www.nodc.noaa.gov/OC5/WOD/pr_wod.html][World Ocean Database (WOD)]], maintained by the (US) [[http://www.noaa.gov/][National Oceanic and Atmospheric Administration]].
It reads a small subset of WOD data that has been downloaded and parsed separately (specifically,
Moored Buoys (MRB) data from around Japan) and determines possible locations for ゴジラ (Godzilla), a potentially fictious marine animal.

At a high level, when the application is started, for example, via Activator, a Spark instance is created in memory,
and a Play-based web application is started.

When you navigate your browser to http://localhost:9000, a request is made to the server, and a response is generated
using a Play template. This template returns HTML and loads React via [[http://requirejs.org/][requirejs]].
A JS request to http://localhost:9000/locations/ (plus a number - for example, http://localhost:9000/locations/13)
is serviced by a Play controller function that makes a request to Spark to execute a job and return the results.
Assuming that a valid request is made and all goes well, a JSON response will be returned.

Results are retrieved from Spark as a [[http://spark.apache.org/docs/latest/sql-programming-guide.html][Spark DataFrame]], and are mapped to a list of Location classes before being converted to JSON as the response.


** The User Interface

[[file:tutorial/screenshot.png]]

The Refinement toolbar buttons change the threshold of deviation from the average temperature required to 
"get a hit". Low refinement results in more markers, high refinement only one. The default is medium.

** Spark

Configuration is provided in the [[http:#code/conf/application.conf][application.conf]] file. When the Akka system starts, Spark is booted
as well.

Data is provided in the [[http:#code/conf/data.json][data.json]] file. To spare you the trouble, it looks like this only bigger:

#+BEGIN_HTML
<pre><code>
{"$type": "noaa.parser.Entry","castNumber": 10071185,"cruiseId": "JP-0","date": "2000-01-12","latitude": 34.5667,"longitude": 139.8667,"depth": 0.0,"temperature": 17.94}
{"$type": "noaa.parser.Entry","castNumber": 10071185,"cruiseId": "JP-0","date": "2000-01-12","latitude": 34.5667,"longitude": 139.8667,"depth": 50.0,"temperature": 17.83}
{"$type": "noaa.parser.Entry","castNumber": 10071185,"cruiseId": "JP-0","date": "2000-01-12","latitude": 34.5667,"longitude": 139.8667,"depth": 99.0,"temperature": 17.78}
</code></pre>
#+END_HTML

The main prerogative of this application is to demonstrate a simple application using Play and Spark.
In this specific case we are starting Spark in the same JVM as the Play app server.
In a production setting, you will not want to run Spark in this manner.

The master-uri in [[http:#code/conf/application.conf][the configuration file]] can be changed to reference a standalone Spark cluster.
However, you may or may not want to load the test data into it, so consider that before doing so.

** The Client

Facebook React provides a framework for building nice a component-based user interface.
This application uses the JavaScript syntax extension, [[http://facebook.github.io/react/docs/jsx-in-depth.html][JSX]]. The code for the client is located in
the [[http:#code/public/js][public directory]].
Requirejs is used for dependency management, the requirejs configuration is located in [[http:#code/public/js/main.js][main.js]].

main.js loads and initializes [[http:#code/public/js/app.jsx][app.jsx]].

App.jsx is responsible for making the ajax call for location data (using JQuery),
and creating the two React components- the Toolbar and the Map.

[[http:#code/public/js/godzilla/map.jsx][Map.jsx]] creates the Google Map and places LatLng locations and Markers. It responds to changes in location data
automatically because [[http://facebook.github.io/react/docs/multiple-components.html#ownership][it is owned by the App]] component.

[[http:#code/public/js/godzilla/toolbar.jsx][Toolbar.jsx]] creates an extremely simple Bootstrap toolbar. The onclick events of the toolbar call the filter function
in app.jsx, passing hardcoded values used in the server-side service to refine the query for data.
